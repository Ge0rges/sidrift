# vim: filetype=python
from fastapi import FastAPI
from sidrift.track import backtrack as bktrk
from datetime import datetime
import pandas
import geopandas as gpd
from shapely.geometry import Point
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
import json
import logging

logger = logging.getLogger(__name__)

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/backtrack/")
async def backtrack(
    start_date: str = "",
    lon_0: float = 0,
    lat_0: float = 88,
    min_ice_conc: float = 70,
    search_radius: int = 100,
    limit: int = 10,
):
    if len(start_date) == 0:
        start_date = datetime.utcnow()
    else:
        try:
            start_date = datetime.strptime(start_date, "%Y-%m-%d")
        except ValueError:
            return JSONResponse(
                status_code=400,
                content={"error": "start_date must be of the format YYYY-MM-DD"},
            )

    logger.info("Starting to process request")
    data = bktrk(
        start_date, lon_0, lat_0, min_ice_conc, search_radius, None, limit=limit
    )
    if not data:
        return JSONResponse(status_code=404, content={"error": "no data found"})
    logger.info("Request processed")
    return JSONResponse(content=to_geojson(data))


def to_geojson(results: list) -> str:
    if len(results) == 0:
        return json.dumps({})
    df = pandas.DataFrame(results, columns=["date", "lon", "lat"])
    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.lon, df.lat))
    return json.loads(gdf.to_json())


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=9000)
